export declare type TeleBotDevOptions = false | {
    levels?: Levels[];
    ids?: string[];
};
export declare type TeleBotDevLog = {
    id: number | string;
    level?: Levels;
    code?: number | string;
    message?: number | string;
    data?: object;
    error?: object;
};
export declare enum Levels {
    fatal = 0,
    error = 1,
    warn = 2,
    log = 3,
    info = 4,
    debug = 5
}
export declare class TeleBotDev {
    private readonly id;
    private readonly instance;
    private readonly options;
    private logs;
    private logLimit;
    constructor(id: string, instance: object, options: TeleBotDevOptions);
    logger(log: TeleBotDevLog): void;
    private createProcessor;
    debug: (id: string | number, props?: string | number | (Pick<TeleBotDevLog, "error" | "code" | "data"> & {
        message?: any;
    }) | undefined) => void;
    info: (id: string | number, props?: string | number | (Pick<TeleBotDevLog, "error" | "code" | "data"> & {
        message?: any;
    }) | undefined) => void;
    log: (id: string | number, props?: string | number | (Pick<TeleBotDevLog, "error" | "code" | "data"> & {
        message?: any;
    }) | undefined) => void;
    warn: (id: string | number, props?: string | number | (Pick<TeleBotDevLog, "error" | "code" | "data"> & {
        message?: any;
    }) | undefined) => void;
    fatal: (id: string | number, props?: string | number | (Pick<TeleBotDevLog, "error" | "code" | "data"> & {
        message?: any;
    }) | undefined) => void;
    error: (id: string | number, props?: string | number | (Pick<TeleBotDevLog, "error" | "code" | "data"> & {
        message?: any;
    }) | undefined) => void;
}
